#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#define WORKGROUP_SIZE 16

#define SPATIAL_ITERS 1
#define SPATIAL_NEIGHBORS 5

const float pi = 3.14159265f;

#include "includes.glsl"

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout(binding = 0, set = 0, rgba8) uniform image2D image;
layout(binding = 1, set = 0, rgba32f) uniform image2D present;
layout(binding = 2, set = 0) uniform UniFrames {
    uvec4 state;
    uint lightsSize;
    uint frame;    
    vec3 cameraPos;
} sizes;
layout(binding = 3, set = 0, scalar) buffer Lights { Light l[]; } lights;
layout(binding = 4, set = 0, rgba32f) uniform image2D vertexPositions;
layout(binding = 5, set = 0, rgba32f) uniform image2D vertexNormals;
layout(binding = 6, set = 0, rgba32f) uniform image2D vertexMaterials;
layout(binding = 7, set = 0, rgba32f) uniform image2D past;

layout(push_constant) uniform params_t
{
    uint width;
    uint height;
    uint C;
} params;

uint TausStep(uint z, int S1, int S2, int S3, uint M)
{
    uint b = (((z << S1) ^ z) >> S2);
    return (((z & M) << S3) ^ b);    
}

uint LCGStep(uint z, uint A, uint C)
{
    return (A * z + C);    
}

float nextRand(inout uvec4 state)
{
    state.x = TausStep(state.x, 13, 19, 12, 4294967294);
    state.y = TausStep(state.y, 2, 25, 4, 4294967288);
    state.z = TausStep(state.z, 3, 11, 17, 4294967280);
    state.w = LCGStep(state.w, 1664525, 1013904223);

    return 2.3283064365387e-10 * (state.x ^ state.y ^ state.z ^ state.w);
}

/* uint initialSeed(uint frst, uint scnd, uint iterations) */
/* { */
/*   uint wght = 0; */

/*   for (uint n = 0; n < iterations; n++) */
/*   { */
/*     wght += 0x9e3779b9; */
/*     frst += ((scnd << 4) + 0xa341316c) ^ (scnd + wght) ^ ((scnd >> 5) + 0xc8013ea4); */
/*     scnd += ((frst << 4) + 0xad90777d) ^ (frst + wght) ^ ((frst >> 5) + 0x7e95761e); */
/*   } */
/*   return frst; */
/* } */

/* float nextRand(inout uint seed) */
/* { */
/*   seed = (1664525u * seed + 1013904223u); */
/*   return float(seed & 0x00FFFFFF) / float(0x01000000); */
/* } */

reservoir load(ivec2 UV) {
    /* if (UV.x < 0 || UV.y < 0 || UV.x >= params.width || UV.y >= params.height) { */
    /*     return reservoir(0.0, 0.0, 0.0, 0.0, 0.0); */
    /* } */

    vec4 data = imageLoad(present, ivec2(UV));
    reservoir r = { data.x, data.y, data.w, data.z, 0.0f };
    return r;
}

void save(ivec2 UV, reservoir r) {
    vec4 data = clamp(vec4(r.X, r.Y, r.M, r.W), 0.0f, 1.0f);
    data.z = r.M;
    imageStore(past, ivec2(UV), data);
}

vec3 lightSample(Light light, float eps1, float eps2) {
    return light.a + eps1 * light.ab + eps2 * light.ac;
}

float desPdf(Light light, vec3 vpos, vec3 lpos) {
    float L_e = light.intensity;

    vec3  ldir = normalize(vpos - lpos);
    float norm = length(vpos - lpos);

    return dot(ldir, light.normal) / max(norm * norm, 0.001f);
}

float calcPdf(vec3 vpos, float eps1, float eps2) {
    Light light = lights.l[uint(eps1 * sizes.lightsSize)];
    float reusedEps1 = eps1 - uint(eps1);
    vec3  lpos = lightSample(light, reusedEps1, eps2);

    return desPdf(light, vpos, lpos);
}

void update(inout reservoir r, float x_i, float a_i, float w_i, inout uvec4 seed) {
    r.Wsum += w_i; // Wsum
    r.M += 1.0f; // M

    if (nextRand(seed) < (w_i / r.Wsum)) {
        r.X = x_i; // Eps 1
        r.Y = a_i; // Eps 2
    }
}

reservoir combine(vec3 vpos, reservoir r1, in reservoir Q[SPATIAL_NEIGHBORS], inout uvec4 seed) {
    reservoir s = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

    update(s, r1.X, r1.Y, max(r1.W * calcPdf(vpos, r1.X, r1.Y) * r1.M, 0.0001f), seed);

    float M = 0.0f;
    for (uint i = 0; i < SPATIAL_NEIGHBORS; i++) {
        if (length(vec4(Q[i].X, Q[i].Y, Q[i].M, Q[i].W)) < 0.01f)
            continue;

        update(s, Q[i].X, Q[i].Y, max(Q[i].W * calcPdf(vpos, Q[i].X, Q[i].Y) * Q[i].M, 0.0001f), seed);

        M += Q[i].M;
    }

    if (M < 0.01f)
        return r1;

    s.M = r1.M + M;
    s.W = max(s.Wsum / calcPdf(vpos, s.X, s.Y) / s.M, 0.0001f);
    return s;
}

void main()
{
    const ivec2 absPos = ivec2(gl_GlobalInvocationID.xy);
    if(absPos.x >= params.width || absPos.y >= params.height)
        return;

    reservoir r = load(absPos);
    if (length(vec4(r.X, r.Y, r.M, r.W)) < 0.01f) {
        /* save(ivec2(gl_GlobalInvocationID.xy), r); */
        return;
    }
    vec3 vpos = imageLoad(vertexPositions, absPos).xyz;
    float vpos_len = length(vpos - sizes.cameraPos);

    vec3 vnorm = imageLoad(vertexNormals, absPos).xyz;
    vec3 vmat = imageLoad(vertexMaterials, absPos).xyz;

    uint idx = absPos.y * params.width + absPos.x;
    uvec4 seed = sizes.state + idx;
    /* uint seed = initialSeed(absPos.x + (sizes.frame + 2) * params.width, absPos.y + (sizes.frame + 2) * params.height, 30); */

    reservoir Q[SPATIAL_NEIGHBORS];

    vec3 qpos;
    reservoir erase = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };
    /* reservoir erase = { 0.0f, 0.0f, 0.0f, 4.0f, 0.0f }; */
    for (uint j = 0; j < SPATIAL_ITERS; j++) {
        uint i = 0;
        while (i < SPATIAL_NEIGHBORS) {
            float angle = nextRand(seed) * 2.0f * pi;
            float radius = sqrt(nextRand(seed)) * 30.0f;

            int x = clamp(absPos.x + int(floor(cos(angle) * radius)), 0, int(params.width) - 1);
            int y = clamp(absPos.y + int(floor(sin(angle) * radius)), 0, int(params.height) - 1);

            /* uint x = clamp(absPos.x + uint(nextRand(seed) * 29) - 15, 0, params.width - 2); */
            /* if (x >= absPos.x) */
            /*     x++; */
            /* uint y = clamp(absPos.y + uint(nextRand(seed) * 29) - 15, 0, params.height - 2); */
            /* if (y >= absPos.y) */
            /*     y++; */

            Q[i] = load(ivec2(x, y));
            i++;

            /* if (Q[i].M < -0.01f) { */
            /*     Q[i - 1] = erase; */
            /*     continue; */
            /* } */

            vec3 qnorm = imageLoad(vertexNormals, ivec2(x, y)).xyz;
            if (dot(vnorm, qnorm) < 0.9063) {
                Q[i - 1] = erase;
                continue;
            }

            qpos = imageLoad(vertexPositions, ivec2(x, y)).xyz;
            if ((vpos_len * 1.1) < length(qpos - sizes.cameraPos)) {
                Q[i - 1] = erase;
                continue;
            }
        }
        r = combine(vpos, r, Q, seed);
    }

    save(ivec2(gl_GlobalInvocationID.xy), r);

    // Shade
    Light light = lights.l[uint(r.X * sizes.lightsSize)];
    float reusedEps1 = r.X - uint(r.X);
    vec3 lpos = lightSample(light, reusedEps1, r.Y);

    vec3 ldir = normalize(vpos - lpos);
    float norm = length(vpos - lpos);
    
    float C = (params.C == 1) ? 100.0f : 1.0f;
    /* float C = (params.C == 1) ? 50.0f : 1.0f; */
    float L_e = light.intensity;
    vec3 BRDF = vmat / pi; // Lambert

    vec3 explicitColor = C * BRDF * L_e * dot(-ldir, vnorm) * dot(ldir, light.normal) / max(norm * norm, 0.001f);
    /* vec3 explicitColor = C * max(1.2f * log(vpos_len), 4.0f) * BRDF * L_e * dot(-ldir, vnorm) * dot(ldir, light.normal) / max(norm * norm, 0.001f); */

    /* imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(clamp(vec3(vpos_len) / 20.0f, 0.0f, 1.0f), 1.0f)); */
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(clamp(explicitColor * r.W, 0.0f, 1.0f), 1.0f));
}
