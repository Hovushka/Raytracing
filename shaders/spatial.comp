#version 450
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#define WORKGROUP_SIZE 32
float pi = 3.14159265f;

#include "includes.glsl"

layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;
layout(binding = 0, set = 0, rgba8) uniform image2D image;
layout(binding = 1, set = 0, rgba8) uniform image2D present;
layout(binding = 2, set = 0) uniform UniFrames {
    uint lightsSize;
    uint frame;    
    vec3 cameraPos;
} sizes;
layout(binding = 3, set = 0, scalar) buffer Lights { Light l[]; } lights;
layout(binding = 4, set = 0, rgba8) uniform image2D vertexPositions;
layout(binding = 5, set = 0, rgba8) uniform image2D vertexNormals;
layout(binding = 6, set = 0, rgba8) uniform image2D vertexMaterials;

layout(push_constant) uniform params_t
{
    uint width;
    uint height;
} params;

uint initialSeed(uint frst, uint scnd, uint iterations)
{
  uint wght = 0;

  for (uint n = 0; n < iterations; n++)
  {
    wght += 0x9e3779b9;
    frst += ((scnd << 4) + 0xa341316c) ^ (scnd + wght) ^ ((scnd >> 5) + 0xc8013ea4);
    scnd += ((frst << 4) + 0xad90777d) ^ (frst + wght) ^ ((frst >> 5) + 0x7e95761e);
  }
  return frst;
}

float nextRand(inout uint seed)
{
  seed = (1664525u * seed + 1013904223u);
  return float(seed & 0x00FFFFFF) / float(0x01000000);
}

#define SPATIAL_ITERS 2
#define SPATIAL_NEIGHBORS 5

reservoir load(vec2 UV) {
    vec4 data = imageLoad(present, ivec2(UV));
    reservoir r = { data.x, data.y, data.w, data.z, 0.0f };
    return r;
}

vec3 lightSample(Light light, float eps1, float eps2) {
    return light.a + eps1 * light.ab + eps2 * light.ac;
}

float desPdf(Light light, vec3 vpos, vec3 lpos) {
    float L_e = light.intensity;

    vec3  ldir = normalize(vpos - lpos);
    float norm = length(vpos - lpos);

    return dot(ldir, light.normal) / (norm * norm);
}

float calcPdf(vec3 vpos, float eps1, float eps2) {
    Light light = lights.l[uint(eps1 * sizes.lightsSize)];
    float reusedEps1 = eps1 - uint(eps1);
    vec3  lpos = lightSample(light, reusedEps1, eps2);

    return desPdf(light, vpos, lpos);
}

void update(inout reservoir r, float x_i, float a_i, float w_i, inout uint seed) {
    r.Wsum += w_i; // Wsum
    r.M += 1.0f; // M

    if (nextRand(seed) < (w_i / r.Wsum)) {
        r.X = x_i; // Eps 1
        r.Y = a_i; // Eps 2
    }
}

reservoir combine(vec3 vpos, reservoir r1, in reservoir Q[SPATIAL_NEIGHBORS], inout uint seed) {
    reservoir s = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };

    update(s, r1.X, r1.Y, r1.W * calcPdf(vpos, r1.X, r1.Y) * r1.M, seed);

    float M = 0.0f;
    for (uint i = 0; i < SPATIAL_NEIGHBORS; i++) {
        /* if (length(vec4(Q[i].X, Q[i].Y, Q[i].M, Q[i].W)) < 0.01f) */
        /*     continue; */

        update(s, Q[i].X, Q[i].Y, Q[i].W * calcPdf(vpos, Q[i].X, Q[i].Y) * Q[i].M, seed);

        M += Q[i].M;
    }

    /* if (M < 0.01f) */
    /*     return r1; */

    s.M = r1.M + M;
    s.W = s.Wsum / calcPdf(vpos, s.X, s.Y) / s.M;
    return s;
}

void main()
{
	const ivec2 absPos = ivec2(gl_GlobalInvocationID.xy);
    if(absPos.x >= params.width || absPos.y >= params.height)
        return;

    reservoir r = load(absPos);
    if (length(vec4(r.X, r.Y, r.M, r.W)) < 0.01f)
        return;
    vec3 vpos = imageLoad(vertexPositions, absPos).xyz;
    vec3 vnorm = imageLoad(vertexNormals, absPos).xyz;
    vec3 vmat = imageLoad(vertexMaterials, absPos).xyz;

    uint seed = initialSeed(absPos.x * (sizes.frame + 2), absPos.y * (sizes.frame + 2), 8);

    reservoir Q[SPATIAL_NEIGHBORS];

    reservoir erase = { 0.0f, 0.0f, 0.0f, 0.0f, 0.0f };
	for (uint j = 0; j < SPATIAL_ITERS; j++) {
        uint i = 0;
        while (i < SPATIAL_NEIGHBORS) {
            uint x = absPos.x + uint(nextRand(seed) * 30) - 15;
            uint y = absPos.y + uint(nextRand(seed) * 30) - 15;

            /* if ((absPos.x == x) && (absPos.y == y)) continue; */
            /* if (x < 0) continue; */
            /* if (y < 0) continue; */
            /* if (x >= params.width) continue; */
            /* if (y >= params.height) continue; */

            Q[i] = load(vec2(x, y));
            i++;

            /* vec3 qnorm = imageLoad(vertexNormals, ivec2(x, y)).xyz; */
            /* if (dot(vnorm, qnorm) < 0.9063) { */
            /*     Q[i - 1] = erase; */
            /*     continue; */
            /* } */

            /* vec3 qpos = imageLoad(vertexPositions, ivec2(x, y)).xyz; */
            /* if (length(vpos - sizes.cameraPos) * 1.1 < length(qpos - sizes.cameraPos)) */
            /*     Q[i - 1] = erase; */
        }
        r = combine(vpos, r, Q, seed);
    }

    // Shade
    Light light = lights.l[uint(r.X * sizes.lightsSize)];
    float reusedEps1 = r.X - uint(r.X);
    vec3 lpos = lightSample(light, reusedEps1, r.Y);

    vec3 ldir = normalize(vpos - lpos);
    float norm = length(vpos - lpos);
    
    float C = 2.0f;
    float L_e = light.intensity;
    vec3 BRDF = vmat / pi; // Lambert

    vec3 explicitColor = C * BRDF * L_e * dot(-ldir, vnorm) * dot(ldir, light.normal) / (norm * norm);

	imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(explicitColor * r.W, 1.0f));
}
